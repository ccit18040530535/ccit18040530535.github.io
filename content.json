{"meta":{"title":"抑郁FOX","subtitle":"魅狐","description":"努力逃离黑暗，寻找光明","author":"Iffy Fox","url":"https://ccit18040530535.github.io","root":"/"},"pages":[],"posts":[{"title":"云服务器的实现","slug":"云服务器的实现","date":"2020-05-01T07:00:39.000Z","updated":"2020-05-01T07:00:39.000Z","comments":true,"path":"2020/05/01/云服务器的实现/","link":"","permalink":"https://ccit18040530535.github.io/2020/05/01/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/","excerpt":"云服务器的搭建与绑定","text":"云服务器的搭建与绑定","categories":[{"name":"教程","slug":"教程","permalink":"https://ccit18040530535.github.io/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://ccit18040530535.github.io/tags/Github/"}],"author":"IffyFox"},{"title":"个人域名实现","slug":"个人域名实现","date":"2020-03-31T16:27:39.000Z","updated":"2020-03-31T16:27:39.000Z","comments":true,"path":"2020/04/01/个人域名实现/","link":"","permalink":"https://ccit18040530535.github.io/2020/04/01/%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D%E5%AE%9E%E7%8E%B0/","excerpt":"个人域名的实现","text":"个人域名的实现","categories":[{"name":"教程","slug":"教程","permalink":"https://ccit18040530535.github.io/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://ccit18040530535.github.io/tags/Github/"}],"author":"IffyFox"},{"title":"Github的优化（二）：","slug":"评论模块","date":"2020-03-29T18:27:39.000Z","updated":"2020-03-29T18:27:39.000Z","comments":true,"path":"2020/03/30/评论模块/","link":"","permalink":"https://ccit18040530535.github.io/2020/03/30/%E8%AF%84%E8%AE%BA%E6%A8%A1%E5%9D%97/","excerpt":"评论模块的添加","text":"评论模块的添加 \\1、配置第三方应用** 使用码云的issues作为评论系统，就要使用码云来登录评论，所以需要在码云上配置第三方应用。 注册一个新的第三方应用 https://gitee.com/oauth/applications/new","categories":[{"name":"教程","slug":"教程","permalink":"https://ccit18040530535.github.io/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://ccit18040530535.github.io/tags/Github/"}],"author":"IffyFox"},{"title":"Github的优化（一）：","slug":"主题的更改","date":"2020-03-29T16:27:39.000Z","updated":"2020-03-29T16:27:39.000Z","comments":true,"path":"2020/03/30/主题的更改/","link":"","permalink":"https://ccit18040530535.github.io/2020/03/30/%E4%B8%BB%E9%A2%98%E7%9A%84%E6%9B%B4%E6%94%B9/","excerpt":"主题的更改","text":"主题的更改 一．主题的更改 这些天我在搞用hexo 和github搭建一个自己的博客，博客搭建好了之后相当简陋，看到别人炫酷的主题，我就开始有点躁动不安了，在网上搜了搜，资料都很零散不够方便，所以我在这里在总结一下。 首先在浏览器 https://hexo.io/themes/ 进入github官方主题界面，如图： 里面有非常多的主题，选择一个自己喜欢的，点进去 ，就比如说我选了这个： 记住这个主题的名字 叫\\Yilia-plus** ,点击去之后就会进入这个主题拥有者的博客；然后找到博主的仓库，进入仓库： 在搜索栏中搜索刚才那个主题的名字 咱这里是 Yilia-plus 点进去这篇博客，将它的下载地址复制下来： 在自己的blog文件夹下打开gitbash，执行以下指令： 1hexo clone https://github.com/JoeyBling/hexo-theme-yilia-plus.git thems/yilia-plus 下载完之后会在themes 目录下生成一个名为cyanstyle文件 更改一下hexo工程目录下的配置文件_config.yml，主题名修改一下即可 然后分别执行下面三个步骤： 1hexo clean 1hexo g 1hexo s 浏览器打开本地仓库 http://localhost:4000/ 你本地仓库服务的端口号)），你会发现本地仓库已经变为自己刚刚更改的主题了 ；后执行下面这一步，上传到远程仓库就行了： 1hexo d 打开自己的博客链接就能看到主题已更改。","categories":[{"name":"教程","slug":"教程","permalink":"https://ccit18040530535.github.io/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://ccit18040530535.github.io/tags/Github/"}],"author":"IffyFox"},{"title":"博文相关（二）：","slug":"图床的搭建","date":"2020-03-25T02:27:39.000Z","updated":"2020-03-25T02:27:39.000Z","comments":true,"path":"2020/03/25/图床的搭建/","link":"","permalink":"https://ccit18040530535.github.io/2020/03/25/%E5%9B%BE%E5%BA%8A%E7%9A%84%E6%90%AD%E5%BB%BA/","excerpt":"图床的搭建","text":"图床的搭建 #第一部分（jsDelivr-Github）1.首先创建一个Github 由于我创建过了名为Picture的仓库，在这里以Picture代替。 注意：仓库名不能重复创建 2.克隆Github仓库到本地去Github仓库，复制仓库的ssh地址。在你本地博客目录中，执行以下命令： 1| git clone 复制的仓库ssh地址 3.文件上传到Github仓库在你的本地博客目录里你会发现出现了新的名为CDN的文件夹，然后在CDN文件夹中鼠标右击点击Git Bash Here,执行一下命令： 1234| git status &#x2F;&#x2F;查看状态| git add . &#x2F;&#x2F;添加所有文件到暂存区 不要忘记后面那个.| git commit -m &#39;提交信息&#39; &#x2F;&#x2F;把文件提交到仓库（这个提交信息可以写你第几次提交）| git push &#x2F;&#x2F;推送至远程仓库 4.发布版本 这样就可以使用了，但每次有新图片上传时，要更新就是发布新版本，更新时就直接使用3,4步就行（第四步的版本号要进行修改）。 由于上面是jsDelivr-Github方法每次更新，太过烦琐，下面是加上PinGo更快速的方法 #第二部分 在第一部分的基础上进行 1.先下载PinGoPinGo下载地址：https://github.com/Molunerfinn/picgo/releases 2.生成token 复制生成的token，（注意勿要关闭网页这个token将不再出现）。 3.配置PinGo设定自定义域名： 12| https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;ccit18040530535&#x2F;Picture&#x2F;| https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;用户名&#x2F;仓库名&#x2F; 配置完就可以使用了。但要注意图床是任何人都能看到的，不要上传私密照片。","categories":[{"name":"教程","slug":"教程","permalink":"https://ccit18040530535.github.io/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://ccit18040530535.github.io/tags/Github/"}],"author":"IffyFox"},{"title":"博文相关（一）：","slug":"博文的写作与上传","date":"2020-03-20T02:27:39.000Z","updated":"2020-03-20T02:27:39.000Z","comments":true,"path":"2020/03/20/博文的写作与上传/","link":"","permalink":"https://ccit18040530535.github.io/2020/03/20/%E5%8D%9A%E6%96%87%E7%9A%84%E5%86%99%E4%BD%9C%E4%B8%8E%E4%B8%8A%E4%BC%A0/","excerpt":"博文的写作与上传","text":"博文的写作与上传 一．新建博文 1下载Typora软件 \\1. 设置编辑路径（此步骤可省略，主要是为了更加快捷的打开博文进行书写） （在Windows里开发，大家习惯通过鼠标右键的方式来新建文件，然后使用编辑器打开。为了更加\\自动化**，我么希望通过一个指令来完成上述两个动作：新建文件+打开编辑器。） 在站点根目录下（blog\\）下新建一个文件夹（scripts），然后在新建一个文本（auto_open），在文件中填入以下内容，后把文本的后缀名改成“.js”。 var spawn = require(‘child_process’).exec; // Hexo 2.x 用户复制这段 //hexo.on(‘new’, function(path){ //spawn(‘start “markdown编辑器绝对路径.exe” ‘ + path); //}); // Hexo 3 用户复制这段 hexo.on(‘new’, function(data){ spawn(‘start “D:\\Program Files\\Typorae\\Typora.exe” ‘ + data.path); }); 注意：spawn括号里start后面的编辑路径得修改为你电脑上Typora安装的位置。 \\2. 新建一篇博文 在blog目录里打开gitbash执行以下语句 hexo new “filename” 其中filename可以用你喜欢的博文名字替代，命令执行完后，就会在_posts下生成一篇名叫filename的新文章。同时你会发现编辑器Typora也打开了，新文章正在等待你的输入！ 二. 开始进行Markdown的写作 · 如果希望查看Typora里文档的Markdown语法格式，点击视图-&gt;源代码模式。 · Markdown的语法格式可以参考以下文档 · Markdown 教程 | 菜鸟教程 · Markdown Here Cheatsheet · Mastering-markdown · Github markdown basics · Github flavored markdown · Original markdown spec: Syntax · Original markdown spec: Basics · marked.js library used by Colaboratory · LaTex mathematics for equations · 语法注意点： · 代码区的的起始符```和上一行之间必须单独加一空行； · 首行缩进：在段落开头加上&amp; emsp; 注意&amp;和e之间没有空格。 · 分隔线：输入—后回车。 · 斜体：用在需要大段引用他人文字的部分 。 用两个“*”把相应的文字夹起来 · 强调：一级强调是加粗（ 用两个“**”把内容夹起来 ），二级强调是引用（在内容前加上 &gt; ） · “#”，“&gt;”这两个符号，一定要在行首，不要空格，否则会引起识别的问题。 三. 本地查看新博文 \\1. 清除旧数据（根目录下的public文件夹存放着旧有博客生成的HTML网页） hexo clean 安装完后如果看到提示：数据库和public文件夹被删掉，则说明执行成功 \\2. 生成新的数据（生成新的HTML网页会存放到public文件夹下） hexo g 若实验结果出现连续出现Generated:字符串，则表示执行成功。 该命令首先会将source文件夹下所有的md文件进行渲染生成HTML页面，然后存放在public文件夹下。g: generate 意思是生成。 \\3. 启动hexo服务 hexo s 若结果发现有”Hexo is running at http://localhost:4000/ 字符串，则表示启动成功，Hexo当前就运行在上述网址。上述指令中的s表示server。 \\4. 博客的本地预览 在浏览器中输入上述网址 http://localhost:4000/ ,如果看到新页面则大功告成。 四. 上传到github hexo d 表示启动成功，Hexo的新的博文已经上传成功 hexo d 这一步一定要在网络的情况下执行，否则无法同步到github里面，会出现以下图片里的情况。","categories":[{"name":"教程","slug":"教程","permalink":"https://ccit18040530535.github.io/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://ccit18040530535.github.io/tags/Github/"}],"author":"IffyFox"},{"title":"Github搭建（三）：","slug":"Hexo的部署","date":"2020-03-15T02:27:39.000Z","updated":"2020-03-15T02:27:39.000Z","comments":true,"path":"2020/03/15/Hexo的部署/","link":"","permalink":"https://ccit18040530535.github.io/2020/03/15/Hexo%E7%9A%84%E9%83%A8%E7%BD%B2/","excerpt":"Hexo的部署","text":"Hexo的部署 一. github的准备 1. \\注册Github**：右上角的sign in是登录，sign up是注册。 2. \\新建仓库(Repository)**:点击create repository按钮。 注意仓库名称必须写为username.github.io 其中username是你注册Github使用的用户名。 1. \\查看仓库配置**：点击仓库右上角的Settings选项。 如果发现Github Pages这一部分有Your site is published at https://username.github.io 字样，则表明仓库具备了网页展示功能。提醒下：这个新建的仓库就是用来下面保存Hexo博客的各种资源文件的。\\4. \\获取本机当前用户的SSH公钥**：首先查看在本机的当前用户(操作系统的登录账户)目录下是否已经存在ssh公钥。~表示当前用户的家目录。 二. 生成SSH添加到GitHub 回到你的blog文件夹下的git bash中，输入以下代码： git config –global user.name “yourname” git config –global user.email “youremail” 这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户，我的操作如下： ) 可以用以下两条，检查一下你有没有输对 git config user.name git config user.email 若如上图结果所示，则表示对了；然后创建SSH,一路回车 ssh-keygen -t rsa -C “youremail” 这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹里的这个文件，打开方式用记事本打开，然后复制里面的内容。 （ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。） 而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key 把你的id_rsa.pub里面的信息复制进去。 在gitbash中，查看是否成功 ssh -T git@github.com 原文链接：https://blog.csdn.net/sinat_37781304/java/article/details/82729029 三. 绑定hexo和github 1. \\修改本地站点配置文件**: 打开站点目录（blog\\）下的_config.yml文件，将最后一部分修改为 deploy: ​ type: git ​ repo: git@github.com:username/username.github.io.git ​ branch: master 这段源码的意思是：我们将采用git工具来做Hexo博客的部署，部署在哪里呢？位置在Github上的username/username.github.io.git这样一个仓库里，且是仓库的master分支上。注意:上述冒号的后面都有一个空格。 1. \\安装关联hexo和git的工具**: npm install hexo-deployer-git –save 如果最后可以看到这个工具的版本号，则表明安装成功。 四. Hexo部署 1.部署hexo：执行以下命令 hexo d 这个命令会将本地博客根目录（blog\\）下public文件夹里的所有文件上传至Github上的username/username.github.io.git这个仓库。d:depoly 是部署的意思。 2. \\博客预览**：在浏览器中输入https://username.github.io ,如果看到新页面则大功告成。","categories":[{"name":"教程","slug":"教程","permalink":"https://ccit18040530535.github.io/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://ccit18040530535.github.io/tags/Github/"}],"author":"IffyFox"},{"title":"Github搭建（二）：","slug":"Github的注册","date":"2020-03-15T01:20:02.000Z","updated":"2020-03-15T01:20:02.000Z","comments":true,"path":"2020/03/15/Github的注册/","link":"","permalink":"https://ccit18040530535.github.io/2020/03/15/Github%E7%9A%84%E6%B3%A8%E5%86%8C/","excerpt":"Github账号的注册","text":"Github账号的注册 \\1.注册账号**https://github.com/ 在谷歌搜索框里搜索github，打开github的官网，如下图所示 点击图中的sign up 进行个人博客的注册 输入账号、邮箱（QQ邮箱即可），密码，然后点击注册按钮进行注册 1. \\初始设置**z注册完成后，选用个人free免费账号完成设置 2. \\验证账号**新建一个仓库 发现你的邮箱地址未验证， 登录你注册时的邮箱，找到发给你的相应的邮件，然后进行验证即可 3. \\新建仓库**注意这里的仓库名最好与你的用户名保持一致","categories":[{"name":"教程","slug":"教程","permalink":"https://ccit18040530535.github.io/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://ccit18040530535.github.io/tags/Github/"}],"author":"IffyFox"},{"title":"博客搭建所需软件网盘获取码","slug":"博客搭建所需软件网盘获取码","date":"2020-03-15T01:20:02.000Z","updated":"2020-03-15T01:20:02.000Z","comments":true,"path":"2020/03/15/博客搭建所需软件网盘获取码/","link":"","permalink":"https://ccit18040530535.github.io/2020/03/15/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%89%80%E9%9C%80%E8%BD%AF%E4%BB%B6%E7%BD%91%E7%9B%98%E8%8E%B7%E5%8F%96%E7%A0%81/","excerpt":"Typora、Git、Node、PicGo安装包提取","text":"Typora、Git、Node、PicGo安装包提取 为了方便各位，又或者给小白提供便捷方式，搭建博客过程若软件安装包无法安装可复制以下网盘分享码进行下载。这里网盘分享了64位和32位的安装包。 Typora安装包：64位：链接：https://pan.baidu.com/s/1XfRfvSLryADugARF7PAiUA 提取码：hijk 32位：链接：https://pan.baidu.com/s/10FMhzTgf84GmLm_Ru3yGzg 提取码：qxah Git安装包：64位：链接：https://pan.baidu.com/s/1Wy-yB_EsRVdOFm4MxMH90g 提取码：60fw 32位：链接：https://pan.baidu.com/s/19MqUcRXBempboWFwz84_Ag 提取码：9skq Node安装包：64位：链接：https://pan.baidu.com/s/1zuYlW0flZgIvo9lRXdCuNw 提取码：ylq2 32位：链接：https://pan.baidu.com/s/1G2MuikjyzOWwToFP4UvPOQ 提取码：esy1 PicGo安装包链接：https://pan.baidu.com/s/13bqEnb_tXtxnW9b0OXuszQ提取码：6360 大概就这四个，如有遗漏后续会进行补充","categories":[{"name":"资料","slug":"资料","permalink":"https://ccit18040530535.github.io/categories/%E8%B5%84%E6%96%99/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://ccit18040530535.github.io/tags/Github/"}],"author":"IffyFox"},{"title":"Github搭建（一）：","slug":"本地博客的搭建","date":"2020-03-05T05:14:21.000Z","updated":"2020-03-05T05:14:21.000Z","comments":true,"path":"2020/03/05/本地博客的搭建/","link":"","permalink":"https://ccit18040530535.github.io/2020/03/05/%E6%9C%AC%E5%9C%B0%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/","excerpt":"本地博客的搭建与问题","text":"本地博客的搭建与问题 博客的搭建网上教程参差不齐，百度起来也比较麻烦，下面是我在搭建博客时的过程和发生的一些问题，欢迎你们在评论区进行补充；这个过程比较小白，谢谢观看了。让你成功搭建一个属于自己的博客。 准备工作 ： 1.1 电脑系统 操作系统 Windows 10 ，版本 1703 及以上，操作如下： (1)打开cmd窗口：快捷键win+R，在弹出的窗口输入cmd，点击确定； (2)然后在弹出的窗口光标处输入”Winver”，回车；出现以下内容： (3)查看版本信息即可，此图片里显示版本为1903 1.2 浏览器版本 浏览器Chrome ，版本70.0.3526.0及以上，操作如下 （1）打开浏览器，点开右上角省略号 (2)鼠标移至帮助，点击”关于Google Chrome”,出现以下界面即可查看： 请求前期保证以上安装成功，否则后期再安装会很麻烦。 1.3 电脑位数 查看计算机是 32 位还是 64位 (由于后续下载软件操作需要对应电脑的位数，下载合适的安装包；当然现在大多数电脑都是64位，不排除有例外) (1)快捷键“Win＋R”操作框，输入“dxdiag”命令，点击确定： (2)这时我们就能看到自己电脑的类型了: (3)图片显示为：64位 实际操作 2.1 node的安装 (1)点击安装node或在浏览器中自行搜索node下载（请选择10以上的版本），安装时一路next下去即可： or （2）检查是否安装成功，在cmd窗口中输入以下指令： 1node -v 若结果显示版本号，则表示安装成功 继续输入以下指令： 1npm -v 若结果显示版本号，则表示安装成功 Tips: 新版的Node.js已经集成了npm，所以Node.js安装好后npm也一并安装好了。npm全称Node Package Manager，是运行在 Node.js 上的默认包管理工具。 2.2 git的安装 (1)点击安装git或在浏览器中自行搜索git下载 ①首先进入git官网，点击Windows版本进行下载安装，安装时一路next下去即可。 ②点击要下载的安装版本 （可能会出现无法下载的情况，这个时候我们可以借助第三方来获取下载地址，请查看目录本章3.2） （2）检查是否安装成功，在cmd窗口中输入以下指令： 1git 若结果显示版本号，则表示安装成功 2.3 hexo的搭建 (1)安装hexo：在cmd窗口使用下面的命令 1npm install hexo-cli -g 若结果以下结果，则表示安装成功 还可输入以下指令来进行核查， 1hexo -v 若结果显示版本号，则表示安装成功 (2) 创建hexo博客目录 1md blog (3) 初始化hexo博客： 依次执行下面两条命令 12cd bloghexo init 若实验结果出现“Start blogging with Hexo!”字符串，则表示初始化成功且可以开始写博客了。 2.4 本地预览 （1）启动hexo服务 1hexo s 若结果发现有”Hexo is running at http://localhost:4000/字符串，则表示启动成功 (2)本地博客预览 在浏览器中输入上述网址http://localhost:4000/,如果看到新页面则大功告成。 本章问题与解决方案 3.1 git下载无法获取 如果Git无法下载，就需要借助第三方；请按照以下来执行下载 ①在你所需下载处，鼠标右击，在出现的界面点击“检查”，右边会有一段加深颜色代码出现， 双击，复制“ ”里的下载链接 或者按F2直接打开控制面板，按照图片步骤，然后进行后续操作。 ②打开百度网盘，在全部文件中点击“离线下载”， 在弹出的界面中粘贴刚刚所复制的下载链接，最后点击开始下载即可； 或者打开迅雷软件，点击左上角的＋ 然后再弹出来的对话框里粘贴刚刚所复制的下载链接，(存放地址可自行决定)，最后点击立即下载即可。 3.2 指令加载速度太慢 采用淘宝镜像代码来提升访问速度 3.3 hexo无法搭建 按照提示删除以前备份的资料，一般文件夹被隐藏，需打开 3.4 localhost:4000无法打开 localhost:4000提示拒绝访问，是因为有进程占用了4000端口，在git切换端口 1$ hexo s -p 5000 一般就可以 了再不行那就是你的iis没有配置好， 打开控制面板 —打开或关闭windows功能——找到Internet information services 勾选","categories":[{"name":"教程","slug":"教程","permalink":"https://ccit18040530535.github.io/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://ccit18040530535.github.io/tags/Github/"}],"author":"IffyFox"},{"title":"First 测试","slug":"First-测试","date":"2020-02-28T07:43:42.000Z","updated":"2020-02-28T07:43:42.000Z","comments":true,"path":"2020/02/28/First-测试/","link":"","permalink":"https://ccit18040530535.github.io/2020/02/28/First-%E6%B5%8B%E8%AF%95/","excerpt":"欢迎来到狐狸的博客，若来了不妨留下你的足迹吧！","text":"欢迎来到狐狸的博客，若来了不妨留下你的足迹吧！","categories":[],"tags":[],"author":"IffyFox"}],"categories":[{"name":"教程","slug":"教程","permalink":"https://ccit18040530535.github.io/categories/%E6%95%99%E7%A8%8B/"},{"name":"资料","slug":"资料","permalink":"https://ccit18040530535.github.io/categories/%E8%B5%84%E6%96%99/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://ccit18040530535.github.io/tags/Github/"}]}